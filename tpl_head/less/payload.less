
.hyphenate{
	overflow-wrap: break-word;
	word-wrap: break-word;
	-webkit-hyphens: auto;
	-ms-hyphens: auto;
	hyphens: auto;
}

/**
	CRu.: XL Container
*/
@container-xl: @container-lg + 200px;
@screen-xl-min: @container-xl;

/*
	CRu.: Extra Large Container

	<div class="blub"></div>

	.blub{
		.container-xl();
	}
*/
.container-xl(@gutter: @grid-gutter-width){
	.container-fixed(@gutter);

	@media (min-width: @screen-sm-min){
		width: auto; // Bootstrap überschreiben! – MUSS drin bleiben
    }
	@media(min-width: @screen-md-min){
		width: auto; // Bootstrap überschreiben! – MUSS drin bleiben
	}
	@media(min-width: @screen-lg-min){
    	width: @container-xl; // Bootstrap überschreiben! – MUSS drin bleiben
		max-width: 100%;
    }
}

/*
	CRu.: Generiere die Extra-Large-Columns

	<div class="col"></div>

	.col{
		.make-sm-column(6);
		.make-md-column(6);
		.make-lg-column(4);
		.make-xl-column(3); <---
	}

*/
.make-xl-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-xl-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}
.make-xl-column-offset(@columns) {
  @media (min-width: @screen-xl-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-xl-column-push(@columns) {
  @media (min-width: @screen-xl-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-xl-column-pull(@columns) {
  @media (min-width: @screen-xl-min) {
    right: percentage((@columns / @grid-columns));
  }
}


/**
	CRu.: Custom – Grid Spalten erzeugen:

	<div class="grid"> <--- .row
		<div></div> <--- .col-xy-0
		<span></span> <--- Macht je nach Spaltenanzahl ein "clear: both", oder gar nichts.
		<div></div>
		<span></span>
	</div>

	LESS:

	.grid{
		.make-row();
		> div{
			.mk-grid-cols(@xs, @sm, @md, @lg, @xl, @gutter, @reset: false);

			- Alle Parameter sind optional (siehe Standardwerte).
			- @reset sorgt dafür, dass ein clear nach der Xten Spalte durchgeführt wird (also bei z.B. @sm: 6, wird das <span> nach der 2. Spalte ein "clear: both" durchführen ).
		}
	}

*/

.grid-reset-base(@nth){
	&:nth-of-type(@{nth}n) when(@nth > 1){
		display: block;
		clear: both;
	}
	& when(@nth = 1){
		display: block;
		clear: both;
	}
}
.grid-reset-div(@nth){
	&:nth-of-type(@{nth}n+1) when(@nth > 1){
		display: block;
		clear: both;
	}
	& when(@nth = 1){
		display: block;
		clear: both;
	}
}

.mk-grid-cols(@xs: @grid-columns, @sm: 6, @md: 4, @lg: 3, @xl: @lg, @gutter: @grid-gutter-width, @reset: false){
	.make-xs-column(@xs, @gutter);
	.make-sm-column(@sm, @gutter);
	.make-md-column(@md, @gutter);
	.make-lg-column(@lg, @gutter);
	.make-xl-column(@xl, @gutter);

	& + span when(@reset = true)
	{
		@media(max-width: @screen-sm-min){
			@val: @grid-columns / @xs;
			.grid-reset-base(@val);
		}
		@media(min-width: @screen-sm-min) and (max-width: @screen-md-min){
			@val: @grid-columns / @sm;
			.grid-reset-base(@val);
		}
		@media(min-width: @screen-md-min) and (max-width: @screen-lg-min){
			@val: @grid-columns / @md;
			.grid-reset-base(@val);
		}
		@media(min-width: @screen-lg-min) and (max-width: @screen-xl-min){
			@val: @grid-columns / @lg;
			.grid-reset-base(@val);
		}
		@media(min-width: @screen-xl-min){
			@val: @grid-columns / @xl;
			.grid-reset-base(@val);
		}
	}

	& + div when(@reset = true)
	{
		@media(max-width: @screen-sm-min){
			@val: @grid-columns / @xs;
			.grid-reset-div(@val);
		}
		@media(min-width: @screen-sm-min) and (max-width: @screen-md-min){
			@val: @grid-columns / @sm;
			.grid-reset-div(@val);
		}
		@media(min-width: @screen-md-min) and (max-width: @screen-lg-min){
			@val: @grid-columns / @md;
			.grid-reset-div(@val);
		}
		@media(min-width: @screen-lg-min) and (max-width: @screen-xl-min){
			@val: @grid-columns / @lg;
			.grid-reset-div(@val);
		}
		@media(min-width: @screen-xl-min){
			@val: @grid-columns / @xl;
			.grid-reset-div(@val);
		}
	}
}

.mk-grid-cols-pull(@xs: 12, @sm: 6, @md: 4, @lg: 3, @xl: @lg){
	& when(@xs > 0){.make-xs-column-pull(@xs)};
	.make-sm-column-pull(@sm);
	.make-md-column-pull(@md);
	.make-lg-column-pull(@lg);
	.make-xl-column-pull(@xl);
}
.mk-grid-cols-push(@xs: 12, @sm: 6, @md: 4, @lg: 3, @xl: @lg){
	& when(@xs > 0){.make-xs-column-push(@xs)};
	.make-sm-column-push(@sm);
	.make-md-column-push(@md);
	.make-lg-column-push(@lg);
	.make-xl-column-push(@xl);
}

.mk-grid-reset(@xs: 12, @sm: 6, @md: 4, @lg: 3, @xl: @lg){
	@media(max-width: @screen-sm-min){
		@val: @grid-columns / @xs;
		& > span{
			.grid-reset-base(@val);
		}
	}
	@media(min-width: @screen-sm-min) and (max-width: @screen-md-min){
		@val: @grid-columns / @sm;
		& > span{
			.grid-reset-base(@val);
		}
	}
	@media(min-width: @screen-md-min) and (max-width: @screen-lg-min){
		@val: @grid-columns / @md;
		& > span{
			.grid-reset-base(@val);
		}
	}
	@media(min-width: @screen-lg-min) and (max-width: @screen-xl-min){
		@val: @grid-columns / @lg;
		& > span{
			.grid-reset-base(@val);
		}
	}
	@media(min-width: @screen-xl-min){
		@val: @grid-columns / @xl;
		& > span{
			.grid-reset-base(@val);
		}
	}
}



.mk-responsive-font-size(@xs: @font-size-base, @sm: @xs, @md: @sm, @lg: @md, @xl: @lg){
	font-size: @xs;
	@media(min-width: @screen-sm-min){font-size: @sm}
	@media(min-width: @screen-md-min){font-size: @md}
	@media(min-width: @screen-lg-min){font-size: @lg}
	@media(min-width: @screen-xl-min){font-size: @xl}
}
